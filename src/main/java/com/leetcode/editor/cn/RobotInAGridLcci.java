package com.leetcode.editor.cn;

//ËÆæÊÉ≥Êúâ‰∏™Êú∫Âô®‰∫∫ÂùêÂú®‰∏Ä‰∏™ÁΩëÊ†ºÁöÑÂ∑¶‰∏äËßíÔºåÁΩëÊ†º r Ë°å c Âàó„ÄÇÊú∫Âô®‰∫∫Âè™ËÉΩÂêë‰∏ãÊàñÂêëÂè≥ÁßªÂä®Ôºå‰ΩÜ‰∏çËÉΩËµ∞Âà∞‰∏Ä‰∫õË¢´Á¶ÅÊ≠¢ÁöÑÁΩëÊ†ºÔºàÊúâÈöúÁ¢çÁâ©Ôºâ„ÄÇËÆæËÆ°‰∏ÄÁßçÁÆóÊ≥ïÔºåÂØªÊâæÊú∫Âô®‰∫∫‰ªéÂ∑¶‰∏äËßí
//ÁßªÂä®Âà∞Âè≥‰∏ãËßíÁöÑË∑ØÂæÑ„ÄÇ 
//
// 
//
// ÁΩëÊ†º‰∏≠ÁöÑÈöúÁ¢çÁâ©ÂíåÁ©∫‰ΩçÁΩÆÂàÜÂà´Áî® 1 Âíå 0 Êù•Ë°®Á§∫„ÄÇ 
//
// ËøîÂõû‰∏ÄÊù°ÂèØË°åÁöÑË∑ØÂæÑÔºåË∑ØÂæÑÁî±ÁªèËøáÁöÑÁΩëÊ†ºÁöÑË°åÂè∑ÂíåÂàóÂè∑ÁªÑÊàê„ÄÇÂ∑¶‰∏äËßí‰∏∫ 0 Ë°å 0 Âàó„ÄÇÂ¶ÇÊûúÊ≤°ÊúâÂèØË°åÁöÑË∑ØÂæÑÔºåËøîÂõûÁ©∫Êï∞ÁªÑ„ÄÇ 
//
// Á§∫‰æã 1: 
//
// ËæìÂÖ•:
//[
//¬† [0,0,0],
//¬† [0,1,0],
//¬† [0,0,0]
//]
//ËæìÂá∫: [[0,0],[0,1],[0,2],[1,2],[2,2]]
//Ëß£Èáä: 
//ËæìÂÖ•‰∏≠Ê†áÁ≤óÁöÑ‰ΩçÁΩÆÂç≥‰∏∫ËæìÂá∫Ë°®Á§∫ÁöÑË∑ØÂæÑÔºåÂç≥
//0Ë°å0ÂàóÔºàÂ∑¶‰∏äËßíÔºâ -> 0Ë°å1Âàó -> 0Ë°å2Âàó -> 1Ë°å2Âàó -> 2Ë°å2ÂàóÔºàÂè≥‰∏ãËßíÔºâ 
//
// ËØ¥ÊòéÔºör Âíå c ÁöÑÂÄºÂùá‰∏çË∂ÖËøá 100„ÄÇ 
// Related Topics Âä®ÊÄÅËßÑÂàí 
// üëç 54 üëé 0


import java.util.ArrayList;
import java.util.List;

public class RobotInAGridLcci {
    public static void main(String[] args) {
        Solution solution = new RobotInAGridLcci().new Solution();
        System.out.println(solution.pathWithObstacles(new int[][]{
                {0, 0, 0},
                {0, 1, 0},
                {0, 0, 0}
        }));
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public List<List<Integer>> pathWithObstacles(int[][] obstacleGrid) {
            int length = obstacleGrid.length;
            int width = obstacleGrid[0].length;
            List<List<Integer>>[][] dp = new List[length][width];
            for (int i = 0; i < length; i++) {
                for (int j = 0; j < width; j++) {
                    int cur = obstacleGrid[i][j];
                    if (cur == 1) {
                        dp[i][j] = new ArrayList<>();
                        continue;
                    }
                    if (i == 0 && j == 0) {
                        List<List<Integer>> ret = new ArrayList<>();
                        List<Integer> preIndex = new ArrayList<>();
                        preIndex.add(i);
                        preIndex.add(j);
                        ret.add(preIndex);
                        dp[i][j] = ret;
                    } else if (i == 0) {
                        List<List<Integer>> prePath = dp[i][j - 1];
                        if (prePath.isEmpty()) {
                            dp[i][j] = new ArrayList<>();
                        } else {
                            extracted(dp, i, j, prePath);
                        }
                    } else if (j == 0) {
                        List<List<Integer>> prePath = dp[i - 1][j];
                        if (prePath.isEmpty()) {
                            dp[i][j] = new ArrayList<>();
                        } else {
                            extracted(dp, i, j, prePath);
                        }
                    } else {
                        List<List<Integer>> prePath1 = dp[i - 1][j];
                        List<List<Integer>> prePath2 = dp[i][j - 1];
                        if (prePath1.isEmpty() && prePath2.isEmpty()) {
                            dp[i][j] = new ArrayList<>();
                        } else if (!prePath1.isEmpty()) {
                            extracted(dp, i, j, prePath1);
                        } else {
                            extracted(dp, i, j, prePath2);
                        }
                    }
                }
            }
            return dp[length - 1][width - 1];
        }

        private void extracted(List<List<Integer>>[][] dp, int i, int j, List<List<Integer>> prePath1) {
            List<Integer> preIndex = new ArrayList<>();
            preIndex.add(i);
            preIndex.add(j);
            List<List<Integer>> ret = new ArrayList<>(prePath1);
            ret.add(preIndex);
            dp[i][j] = ret;
        }
    }


//leetcode submit region end(Prohibit modification and deletion)

}